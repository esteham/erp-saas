import React, { useState, useEffect } from 'react';
import { 
  FaTachometerAlt,
  FaUsers,
  FaTasks,
  FaChartLine,
  FaCalendarAlt,
  FaBell,
  FaCog,
  FaUserShield,
  FaClipboardList,
  FaMoneyBillWave,
  FaBuilding,
  FaEnvelope,
  FaTools,
  FaUserTie,
  FaEye,
  FaPlus
} from 'react-icons/fa';
import { useAuth } from '../../context/AuthContext';
import axios from 'axios';
import { toast } from 'react-toastify';
import DashboardLayout from '../common/DashboardLayout';
import DashboardSidebar from '../common/DashboardSidebar';
import StatCard from '../common/StatCard';
import ServiceRequestCard from '../common/ServiceRequestCard';

const AdminDashboard = () => {
  const [activeTab, setActiveTab] = useState("dashboard");

  // Modal States
  const [showWorkerModal, setShowWorkerModal] = useState(false);
  const [showGroupModal, setShowGroupModal] = useState(false); // For Category Create Modal

  // Category Related States
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false); // Not used now
  const [editModalShow, setEditModalShow] = useState(false);
  const [selectedCat, setSelectedCat] = useState(null);

  const BASE_URL = import.meta.env.VITE_API_URL;

  const refreshCategories = async () => {
    try {
      setLoading(true);
      const res = await axios.get(`${BASE_URL}backend/api/categories/fetch_category.php`,{
        withCredentials: true
      });
      if (res.data.success) {
        setCategories(res.data.categories || []);
      } else {
        setCategories([]);
      }
    } catch (err) {
      console.error("Failed to fetch categories:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteCategory = async (id) => {
    try {
      const res = await axios.post(
        `${BASE_URL}backend/api/categories/delete.php`,
        { id },
        {
          headers: { "Content-Type": "application/json" },
          withCredentials: true,
        }
      );

      if (res.data.success) {
        refreshCategories();
      } else {
        alert("Delete failed: " + res.data.message);
      }
    } catch (err) {
      console.error("Delete error:", err);
    }
  };

  useEffect(() => {
    if (activeTab === "category") {
      refreshCategories();
    }
  }, [activeTab]);

  const renderContent = () => {
    switch (activeTab) {
      case "dashboard":
        return (
          <DashboardContent
            setShowWorkerModal={setShowWorkerModal}
            setShowGroupModal={setShowGroupModal}
          />
        );
      case "worker":
        return <WorkerContent />;
      case "category":
        return (
          <>
            <CategoryContent
              categories={categories}
              loading={loading}
              setShowCreateModal={setShowCreateModal}
              setEditModalShow={setEditModalShow}
              setSelectedcat={setSelectedCat}
              handleDelete={handleDeleteCategory}
            />
          </>
        );
      case "division":
        return <DivisionContent />;
      case "tasks":
        return <TaskContext />;
      case "finance":
        return <FinanceContent />;
      case "messages":
        return <MessagesContent />;
      case "notifications":
        return <NotificationsContent />;
      case "settings":
        return <SettingsContent />;
      default:
        return <h4>Invalid tab selected</h4>;
    }
  };

  return (
    <Container fluid className="admin-dashboard">
      <Row>
        <Sidebar activeTab={activeTab} setActiveTab={setActiveTab} />
        <Col md={9} lg={10} className="main-content p-4">
          <ErrorBoundary>{renderContent()}</ErrorBoundary>
        </Col>
      </Row>

      {/* Worker Registration Modal */}
      <WorkerRegistrationModal
        show={showWorkerModal}
        handleClose={() => setShowWorkerModal(false)}
      />

      {/* Category Create Modal */}
      <CategoryCreateModal
        show={showGroupModal}
        handleClose={() => setShowGroupModal(false)}
        refreshCategories={refreshCategories}
      />
    </Container>
  );
};

export default AdminDashboard;
